- nam: eva.aaa.acl
  grp: aaa
  exe: svc/eva-aaa-acl
  des: Default ACL service
  ins: by default with HMI (*--hmi*)
  txt: Base authorization service, see :doc:`../aaa` for more details.
  tpl: svc-tpl-aaa-acl.yml
  api: svc/aaa-acl/eapi.yml
- nam: eva.aaa.localauth
  grp: aaa
  exe: svc/eva-aaa-localauth
  des: Local user/key authentication service
  ins: by default with HMI (*--hmi*)
  txt: Local user/API key authentication service, see :doc:`../aaa` for more details.
  tpl: svc-tpl-aaa-localauth.yml
  api: svc/aaa-localauth/eapi.yml
- nam: eva.aaa.otp
  grp: aaa
  exe: svc/eva-aaa-otp
  des: OTP 2nd-Factor authentication service
  txt: Provides OTP 2FA, see :doc:`../2fa` for more details.
  tpl: svc-tpl-aaa-otp.yml
  api: svc/aaa-otp/eapi.yml
- nam: eva.controller.lmN
  grp: auto
  exe: svc/eva-controller-lm
  des: Logic manager
  txt: |
    .. include:: ../include/lm.rst
  tpl: svc-tpl-controller-lm.yml
  api: svc/controller-lm/eapi.yml
- nam: eva.controller.srN
  grp: auto
  exe: svc/eva-controller-sr
  des: Script runner controller
  txt: |
    .. include:: ../include/sr.rst
  tpl: svc-tpl-controller-sr.yml
  api: svc/controller-sr/eapi.yml
- nam: eva.controller.trapN
  grp: fb
  exe: svc/eva-controller-trap
  des: SNMP/UDP trap handler
  txt: |
    .. include:: ../include/trap.rst
  tpl: svc-tpl-controller-trap.yml
- nam: eva.controller.enipN
  grp: fb
  exe: svc/eva-controller-enip
  des: Ethernet/IP PLC controller gateway
  txt: Allows to communicate with Ethernet/IP-powered PLCs and other equipment.
  tpl: svc-tpl-controller-enip.yml
  api: svc/controller-enip/eapi.yml
- nam: eva.controller.pubsubN
  grp: fb
  exe: svc/eva-controller-pubsub
  des: Pub/Sub (MQTT) controller gateway
  txt: |
    .. include:: ../include/pubsub.rst
  tpl: svc-tpl-controller-pubsub.yml
  api: svc/controller-pubsub/eapi.yml
- nam: eva.controller.opcuaN
  grp: fb
  exe: svc/eva-controller-opcua
  des: OPC-UA controller gateway
  txt: Allows to communicate with OPC-UA servers.
  tpl: svc-tpl-controller-opcua.yml
  api: svc/controller-opcua/eapi.yml
- nam: eva.bridge.adsN
  grp: fb
  exe: svc/eva-bridge-ads
  des: TwinCAT ADS bridge
  txt: ADS to BUS/RT bridge, required for :doc:`../svc/eva-controller-ads` instances.
  tpl: svc-tpl-bridge-ads.yml
  api: svc/bridge-ads/eapi.yml
- nam: eva.controller.adsN
  grp: fb
  exe: svc/eva-controller-ads
  des: TwinCAT ADS controller
  txt: |
    Allows to communicate with Beckhoff TwinCAT ADS PLCs and other equipment.

    As TwinCAT ADS does not allow to connect more than a single client from a
    single machine (IP), the service instances require
    :doc:`../svc/eva-bridge-ads` to be deployed for each TwinCAT system.

    .. figure:: ../schemas/twincat_bridge.png
        :scale: 50%
        :alt: TwinCAT ADS bridge

  tpl: svc-tpl-controller-ads.yml
  api: svc/controller-ads/eapi.yml
- nam: eva.controller.modbusN
  grp: fb
  exe: svc/eva-controller-modbus
  des: Modbus master controller
  txt: Allows to communicate with Modbus-powered PLCs and other equipment.
  tpl: svc-tpl-controller-modbus.yml
  api: svc/controller-modbus/eapi.yml
- nam: eva.controller.dobj
  grp: fb
  exe: svc/eva-controller-dobj
  des: Data objects I/O controller
  txt: |
    Allows to accept :doc:`data objects <../dobj>` as raw UDP packets from
    various 3rd party sources such as Matlab, LabView, other data modelling
    software as well as from compatible hardware.
  tpl: svc-tpl-controller-dobj.yml
  #api: svc/controller-dobj/eapi.yml
- nam: eva.controller.w1_N
  grp: fb
  exe: svc/eva-controller-w1
  des: 1-Wire (OWFS) controller
  txt: |
    Allows to communicate with 1-Wire equipment via `OWFS <https://owfs.org>`_
    (built-in). Supports both OWFS servers and direct 1-Wire bus access.
  tpl: svc-tpl-controller-w1.yml
  api: svc/controller-w1/eapi.yml
- nam: eva.svc.modbusN
  grp: fb
  exe: svc/eva-svc-modbus-slave
  des: Modbus slave service
  txt: |
    Provides Modbus slave context.

    A :doc:`../svc/eva-controller-modbus` can be used later to pull the context
    and analyze its data (Modbus via the native bus is highly recommended).
  tpl: svc-tpl-modbus-slave.yml
  api: svc/svc-modbus-slave/eapi.yml
- nam: eva.svc.tts.PROVIDER
  grp: misc
  exe: venv/bin/eva4-svc-tts
  des: Text-to-speech service
  ins: py:eva4-svc-tts
  txt: Allows to use text-to-speech functions via the local bus
  tpl: svc-tpl-tts.yml
  api: svc/svc-tts/eapi.yml
- nam: eva.bridge.udpN
  grp: fb
  exe: venv/bin/eva4-svc-bridge-udp
  des: Bus UDP bridge
  ins: py:eva4-bridge-udp
  txt: |
    .. include:: ../include/bridge_udp.rst
  tpl: svc-tpl-bridge-udp.yml
  api: svc/bridge-udp/eapi.yml
- nam: eva.controller.py
  grp: auto
  exe: venv/bin/eva4-svc-controller-py
  des: Python macros controller
  ins: py:eva4-controller-py
  txt: "Executor controller service for Python macros. See :doc:`../lmacro/py/python_macros`."
  tpl: svc-tpl-controller-py.yml
  api: svc/controller-py/eapi.yml
- nam: eva.controller.virtN
  grp: sim
  exe: svc/eva-controller-virtual
  des: Virtual controller
  txt: |
    The virtual controller service allows to define virtual units and sensors,
    which can be used for automation tests, demos and other related purposes.
  tpl: svc-tpl-controller-virtual.yml
  api: svc/controller-virtual/eapi.yml
  xtr: |
    .. include:: ../include/controller_virtual.rst
- nam: eva.filemgr.main
  grp: system
  des: File manager service
  exe: svc/eva-filemgr
  ins: always by default
  txt: |
    The file manager service allows to remotely deploy/undeploy files to/from
    runtime directory. The service is always installed by default, however can
    be removed/undeployed for the security purposes without affecting anything
    but file deployment.
  tpl: svc-tpl-filemgr.yml
  api: svc/filemgr/eapi.yml
- nam: eva.db.iN
  grp: db
  exe: svc/eva-db-influx
  des: InfluxDB state history
  txt: |
    Allows to store item states history in `InfluxDB
    <https://www.influxdata.com>`_, v1 and v2 protocols are supported.

    The service provides unified database EAPI.

    .. include:: ../include/common/timeframe-fill.rst
  xtr: |
    Retention policies
    ==================

    In InfluxDB v1, retention policies can be created as the following:

    .. code:: sql

      CREATE RETENTION POLICY "daily" ON "eva" DURATION 1D REPLICATION 1
      CREATE CONTINUOUS QUERY "downsampled_env_temp1_30m" ON "eva" BEGIN
        SELECT mode(status) as "status",mean(value) as value
        INTO "daily"."sensor:env/temp1"
        FROM "sensor:env/temp1"
        GROUP BY time(30m)
      END

    To process all items with the same downsampled rate, set the continuous
    query to:

    .. code:: sql

      SELECT mode(status) as status, mean(value) as value
      INTO "daily".:MEASUREMENT
      FROM /.*/ WHERE time > now() - 1d
      GROUP BY time(30m);
  tpl: svc-tpl-db-influx.yml
  api: svc/db-influx/eapi.yml
- nam: eva.db.sN
  grp: db
  exe: svc/eva-db-sql
  des: SQL databases state history
  txt: |
    Allows to store item states history in SQL databases. Supported:

    * `SQLite <https://www.sqlite.org/>`_ (serverless)
    * `MySQL <https://www.mysql.com>`_
    * `PostgreSQL <https://www.postgresql.org>`_
    * Microsoft SQL Server (alpha)

    Dataframe filling requires tsdb extension (ts_extension configuration
    parameter) installed and chosen. The following extensions are supported:

    * `Timescale <https://www.timescale.com>`_ (PostgreSQL)

    The service provides unified database EAPI.

    For a dedicated TimescaleDB connector, see :doc:`eva-db-timescale`.

    .. include:: ../include/common/timeframe-fill.rst
  tpl: svc-tpl-db-sql.yml
  api: svc/db-sql/eapi.yml
- nam: eva.db.timescaleN
  grp: db
  exe: svc/eva-db-timescale
  des: TimescaleDB databases state history
  txt: |
    .. include:: ../include/timescale_svc.rst
  tpl: svc-tpl-db-timescale.yml
  api: svc/db-timescale/eapi.yml
- nam: eva.svc.expN
  grp: auto
  exe: svc/eva-svc-expiration
  des: Item state expiration service
  txt: |
    Marks items as expired/error.

    Useful to create lvar timers (timers have status -1 when expired) or set
    error item states (items get status=1 if not updated for a long time, e.g.
    because of a data puller service crash).
  tpl: svc-tpl-expiration.yml
- nam: eva.svc.fwriterN
  grp: db
  exe: svc/eva-svc-filewriter
  des: Item state file writer (JSON/CSV)
  txt: |
    Allows to write item states into JSON/CSV text files.

    The files can be rotated with any external tool or manually. As soon as the
    file is rotated, a new one is created automatically.
  tpl: svc-tpl-filewriter.yml
  api: svc/svc-filewriter/eapi.yml
- nam: eva.hmi.default
  grp: hmi
  exe: svc/eva-hmi
  des: HMI service
  ins: "by default with *--hmi* arg"
  txt: |
    .. include:: ../include/hmi_svc.rst
  tpl: svc-tpl-hmi.yml
  api: svc/hmi/eapi.yml
  xtr: |
    .. include:: ../include/hmi_xtra.rst
- nam: eva.svc.lockerN
  grp: auto
  exe: svc/eva-svc-locker
  des: Shared lock service
  txt: Allows other services to work with shared locks
  tpl: svc-tpl-locker.yml
  api: svc/svc-locker/eapi.yml
- nam: eva.svc.mailer
  grp: auto
  exe: svc/eva-svc-mailer
  des: Mailer service
  txt: Allows other services to send email notifications
  tpl: svc-tpl-mailer.yml
  api: svc/svc-mailer/eapi.yml
- nam: eva.svc.mirror
  grp: system
  exe: svc/eva-svc-mirror
  des: Mirror service
  txt: |
    Allows to host mirror for the current version of EVA ICS distribution and
    Python modules if venv is configured.

    Updating mirror files on the source node
    ========================================

    .. note::

        The files must be updated every time the source node is updated to a
        new version/build.

    Use either :ref:`eva4_eva-shell`:

    .. code:: shell

      eva mirror update

    or :ref:`eva4_eva-cloud-manager-cli`:

    .. code:: shell

      /opt/eva4/bin/eva-cloud-manager node mirror-update

    Configuring mirror on target nodes
    ==================================

    Use either :ref:`eva4_eva-shell`:

    .. code:: shell

      eva mirror set <URL>

    or :ref:`eva4_eva-cloud-manager-cli`:

    .. code:: shell

      /opt/eva4/bin/eva-cloud-manager node mirror-set <URL>

  tpl: svc-tpl-mirror.yml
- nam: eva.repl.N
  grp: repl
  exe: svc/eva-repl
  des: Replication service
  txt: |
  tpl: svc-tpl-replication.yml
  api: svc/repl/eapi.yml
  txt: |
    .. include:: ../include/repl.rst
- nam: eva.repl.legacyN
  grp: repl
  exe: venv/bin/eva4-svc-repl-legacy
  des: Legacy (V3) replication service
  ins: py:eva4-repl-legacy
  txt: |
    .. include:: ../include/repl_v3legacy.rst
  tpl: svc-tpl-replication-legacy.yml
  api: svc/repl-legacy/eapi.yml
- nam: eva.aaa.msad
  grp: aaa
  exe: svc/eva-aaa-msad
  des: Active directory auth service
  txt: Active directory user authentication service, see :doc:`../aaa` for more details.
  api: eva4-esvc/aaa-msad/eapi.yml
  ent: true
  tpl: svc-tpl-aaa-msad.yml
  xtr: |
    .. include:: ../include/msad.rst
- nam: eva.aaa.accounting
  grp: aaa
  exe: svc/eva-aaa-accounting
  des: Event accounting service
  txt: |
    .. include:: ../include/accounting.rst
  api: eva4-esvc/aaa-accounting/eapi.yml
  ent: true
  tpl: svc-tpl-aaa-accounting.yml
  xtr: |
    HTTP API
    ========

    The service provides certain methods via
    :ref:`extra calls<eva4_hmi_http__x__TARGET_SVC__METHOD>` (the methods must
    be called e.g. as *x::eva.aaa.accounting::query*)

    To use HTTP API methods, a user must be either a node administrator or have
    "log" operation permission.

    .. include:: ../include/autogen/http_api-aaa-accounting.rst
- nam: eva.alarm.N
  grp: auto
  exe: svc/eva-svc-alarms
  des: Alarm service
  txt: ISA18.2 alarm service
  api: eva4-esvc/alarms/eapi.yml
  ent: true
  tpl: svc-tpl-alarms.yml
- nam: "eva.zfrepl.N.collector|replicator"
  grp: repl
  exe: svc/eva-zfrepl
  des: Zero-failure replication service
  txt: |
    .. include:: ../include/zfrepl.rst
  api: eva4-esvc/zfrepl/eapi.yml
  ent: true
  tpl: svc-tpl-zfrepl.yml
- nam: eva.kioskman.default
  grp: hmi
  exe: svc/eva-kioskman
  des: HMI kiosk manager
  txt: |
    .. include:: ../include/kioskman.rst
  api: eva4-esvc/kiosk-manager/eapi.yml
  ent: true
  tpl: svc-tpl-kioskman.yml
- nam: eva.generator.default
  grp: sim
  exe: svc/eva-svc-generator
  des: Data generator
  txt: |
    .. include:: ../include/generator.rst
  api: svc/generator/eapi.yml
  tpl: svc-tpl-generator.yml
- nam: "dapp.NAME"
  grp: system
  exe: svc/eva-dapp
  des: Docker Application launcher
  txt: |
    .. include:: ../include/dapp.rst
  api: svc/dapp/eapi.yml
  tpl: svc-tpl-dapp.yml
- nam: "custom.name"
  grp: system
  exe: svc/eva-ffi
  des: FFI launcher
  txt: |
    .. include:: ../include/ffi.rst
  tpl: svc-tpl-ffi.yml
  xtr: |
    EAPI
    ====

    The launcher itself provides no :doc:`../eapi` methods except the standard
    ones (“test”, “info” and “stop”). All other methods are proxied to the
    loaded service library.
- nam: eva.controller.system
  grp: system
  exe: svc/eva-controller-system
  des: System monitoring controller
  txt: |
    .. include:: ../include/controller_system.rst
  tpl: svc-tpl-controller-system.yml
  xtr: |
    .. include:: ../include/controller_system_xtra.rst
